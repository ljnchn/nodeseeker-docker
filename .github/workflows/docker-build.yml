name: Docker Build and Push

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

env:
  GHCR_REGISTRY: ghcr.io
  DOCKERHUB_REGISTRY: docker.io
  GHCR_IMAGE_NAME: ${{ github.repository }}
  DOCKERHUB_IMAGE_NAME: ersichub/nodeseeker

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run linter
        run: |
          if [ -f ".eslintrc.js" ] || [ -f ".eslintrc.json" ]; then
            npm install -g eslint
            eslint . || true
          else
            echo "No lint configuration found, skipping lint"
          fi

  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache Bun dependencies
        uses: actions/cache@v3
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run tests
        run: |
          if [ -d "test" ] || find src -name "*.test.ts" -o -name "*.spec.ts" | grep -q .; then
            echo "Running tests..."
            bun test
          else
            echo "No test files found, skipping tests"
          fi

      - name: Build application
        run: bun run build

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: |
            dist
            build
            .next
            out

  docker:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: ./build-output

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GHCR_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub (only for main & tags)
        if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKERHUB_REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata for GHCR
        id: meta-ghcr
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.GHCR_REGISTRY }}/${{ env.GHCR_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=match,pattern=v(.*),group=1
            type=raw,value=dev,enable={{is_default_branch == false && github.ref == 'refs/heads/develop'}}

      - name: Extract metadata for Docker Hub
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
        id: meta-dockerhub
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKERHUB_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=match,pattern=v(.*),group=1
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push to GHCR
        id: build-ghcr
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-ghcr.outputs.tags }}
          labels: ${{ steps.meta-ghcr.outputs.labels }}
          cache-from: type=registry,ref=${{ env.GHCR_REGISTRY }}/${{ env.GHCR_IMAGE_NAME }}:cache
          cache-to: type=registry,ref=${{ env.GHCR_REGISTRY }}/${{ env.GHCR_IMAGE_NAME }}:cache,mode=max

      - name: Build and push to Docker Hub
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
        id: build-dockerhub
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-dockerhub.outputs.tags }}
          labels: ${{ steps.meta-dockerhub.outputs.labels }}
          cache-from: type=registry,ref=${{ env.DOCKERHUB_IMAGE_NAME }}:cache
          cache-to: type=registry,ref=${{ env.DOCKERHUB_IMAGE_NAME }}:cache,mode=max

  release:
    runs-on: ubuntu-latest
    needs: docker
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create GitHub Release with Changelog
        uses: googleapis/release-please-action@v4
        with:
          release-type: node
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Append Docker image info
        run: |
          echo "\n### Docker Images" >> release_notes.md
          echo "- GHCR: ${{ env.GHCR_REGISTRY }}/${{ env.GHCR_IMAGE_NAME }}:${GITHUB_REF#refs/tags/}" >> release_notes.md
          echo "- Docker Hub: ${{ env.DOCKERHUB_IMAGE_NAME }}:${GITHUB_REF#refs/tags/}" >> release_notes.md
          echo "\n**Digests:**" >> release_notes.md
          echo "- GHCR: ${{ steps.build-ghcr.outputs.digest }}" >> release_notes.md
          if [ -n "${{ steps.build-dockerhub.outputs.digest }}" ]; then
            echo "- Docker Hub: ${{ steps.build-dockerhub.outputs.digest }}" >> release_notes.md
          fi

      - name: Update GitHub Release Notes
        uses: softprops/action-gh-release@v2
        with:
          body_path: release_notes.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}